------------------------- 04 Основы -------------------------

----- 14 Порядок операторов -----

- Ссылка на таблицу 

https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table

- Порядок выполнения операторов выполняется как слева направо так и справа налево.
- Оператор присваивания = выполняется справа налево. Если выражение содержит несколько операторов = , то 
поочередность их выполнения происходит справа налево.

----- 15 Типы данных -----
- 2 больших типа:
1) объекты
2) примитивы

Объекты по умолчанию мутабельны - 
Примитивы по умолчанию имутабельны - нельзя поменять в переменной только 1 символ, необходимо менять ее полностью.

- Из примитивных типов данных выделяется всего 7 примитивов
1) numbers(числа) - числовые символы
2) strings(строки) - символы в кавычках
3) boolean(булевое, логическое) - true или false
4) undefined(не определено) - объявлена переменная, но не присвоено ей значение. Также можно присвоить это 
значение переменной: let a = undefined
5) null(пустое значение) - Оно создается вручную. Явно пустое значение, что бы оно ни было. 
6) Symbol(уникальное неизменне значение) - Уникализация какого-либо значения в переменных с помощью этого типа
7) BigInt(большое число)
 
- В языке JavaScript в отличии от некоторых других языков важно понимать одну деталь:
Не переменная имеет какой-то тип, а то что в ней лежит имеет какой-то тип. В отличии от строго типизированных языков 
в языке JS переменная имеет тип на текущий момент, то что в ней лежит на текущий момент. Так как типы в языке JS 
у переменных меняются на лету. 
JS - это динамически типизированный язык. 

----- 16 упражнение - Расчет проекта ----
Ваша часовая ставка 80$ и вы готовы работать не
более 5 часов в день 5 дней в неделю (кроме выходных).
К вам приходит заказчик и предлагает заказ на 40
часов работы.
Сейчас понедельник.
Вы должны уехать через 11 дней.
Выведете в консоль:
- Boolean переменную успеете ли вы взяться за работу
- Сколько вы за неё попросите?

-- Подробно --
1) Вывести булевую переменную - успеете ли вы взяться за работу
2) Расчитать сколько вы за неё попросите, если 1)-ое будет true
3) Вывести в консоль ответ на оба вопроса:
1. Сможете вы работать или нет
2. Сколько будет стоимость таких работ

----- 17 Шаблонные строки -----
Кода становится меньше, это удобнее и быстрее.





----- Шаблон для git ----- 
lesson complete: 04 основы --> 17 Шаблонные строки